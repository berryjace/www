<?php

namespace BL\Entity\Proxy\__CG__\BL\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class License extends \BL\Entity\License implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function __get($property)
    {
        $this->__load();
        return parent::__get($property);
    }

    public function __set($property, $value)
    {
        $this->__load();
        return parent::__set($property, $value);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'status', 'vendor_signature', 'vendor_title', 'client_signature', 'client_title', 'reject_note_from_client', 'payment_method', 'payment_status', 'sample_status', 'product_desc', 'supplier_name', 'other_desc', 'financial_statement', 'agreement_statement', 'statement', 'applied_date', 'vendor_sign_date', 'client_sign_date', 'admin_sign_date', 'cancel_date', 'vendor_name', 'client_name', 'sharing', 'vendor_type', 'royalty_structure', 'royalty_commission', 'default_renewal_fee', 'annual_advance', 'royalty_description', 'grant_of_license', 'product_sample_link', 'vendor_products', 'recom_for_vendor', 'target_audience_vendor', 'recom_for_client', 'license_specific_note', 'license_agree_number', 'admin_decline_reason', 'vendor_decline_reason', 'client_decline_reason', 'save_status', 'client_id', 'vendor_id', 'TargetAudience');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}