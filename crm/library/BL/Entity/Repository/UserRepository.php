<?php

namespace BL\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Doctrine\Common\Collections;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository {
    const NOT_FOUND = 1;
    const WRONG_PW = 2;

    public function getUser($user_id) {
        $q = $this->_em->createQuery("SELECT u FROM BL\Entity\User u where u.id=" . $user_id);
        return $q->getArrayResult();
    }

    public function getUserLike($user_name) {
        $q = $this->_em->createQuery("SELECT u FROM BL\Entity\User u where u.username LIKE '%" . $user_name . "%'
            or u.first_name LIKE '%" . $user_name . "%' or u.last_name LIKE '%" . $user_name . "%'");
        return $q->getArrayResult();
    }

    public function getUserByName($user_name) {
        $q = $this->_em->createQuery("SELECT u FROM BL\Entity\User u where u.username='" . $user_name . "'");
        return $q->getArrayResult();
    }

    public function getUserByUsername($username) {
        $q = $this->_em->createQuery("SELECT u, ur FROM BL\Entity\User u LEFT JOIN u.roles ur where u.username='" . $username . "'");
        return $q->getArrayResult();
    }

    public function getUsersByRole($role_id, $pg = 1) {
        $q = $this->_em->createQuery("SELECT u, ur FROM BL\Entity\User u LEFT JOIN u.roles ur where ur.id='" . $role_id . "' and u.reg_status='activated'");

        $itemPerPage = 2;
        $records = new \Zend_Paginator(
                        new \DoctrineExtensions\Paginate\PaginationAdapter($q));
        $records->setCurrentPageNumber($pg)
                ->setItemCountPerPage($itemPerPage)
                ->setPageRange(5);
        return $records;
    }

    public function get_all_users($params=array()) {
        $params ["limit"] = isset($params ["limit"]) ? $params ["limit"] : 0;
        $params ["page"] = isset($params ["page"]) ? $params ["page"] : 0;
        if (!empty($params ["start_date"]) && !empty($params ["end_date"])) {
            $date_query = "where u.reg_date >='" . $params ["start_date"] . "' and u.reg_date<='" . $params ["end_date"] . "'";
        } else {
            $date_query = "";
        }

        if (($params ["limit"] * $params ["page"]) >= 0 and $params ["limit"] > 0) {
            $q = $this->_em->createQuery('SELECT u FROM BL\rightEntity\User u ' . $date_query . ' order by ' . $params ["sidx"] . ' ' . $params ["sortd"]);
            $q->setFirstResult(($params['page'] - 1) * $params['limit']);
            $q->setMaxResults($params['limit']);
        } else {
            $q = $this->_em->createQuery('SELECT u FROM BL\Entity\User u ' . $date_query);
        }

        return $q->getArrayResult();
    }

    /**
     * Function to authenticate an user by username and password
     * @author Noman
     * @copyright Blueliner Marketing
     * @version 0.1
     * @access public
     */
    public function _authenticateUser($username, $password) {
	//echo 'here 1'; exit;
        $user = $this->getUserByUsername($username);

        if (\sizeof($user)) {
            $user = reset($user);
            $user['roles'] = reset($user['roles']);
            if ($user['password'] == hash('MD5', $password)) {
                $user_obj = $this->arrayToObject($user);
                return $user_obj;
            }
            throw new \Exception(self::WRONG_PW);
        }
        throw new \Exception(self::NOT_FOUND);
    }

    /**
     * Function to authenticate an user by username and password
     * @author Noman
     * @copyright Blueliner Marketing
     * @version 0.1
     * @access public
     */
    public function _authenticateUserByUsername($username) {
        $user = $this->getUserByUserName($username);

        if (\sizeof($user)) {
            $user = reset($user);
            $user['roles'] = reset($user['roles']);
            if ($user['password']) {
                $user_obj = $this->arrayToObject($user);

                return $user_obj;
            }
            throw new \Exception(self::WRONG_PW);
        }
        throw new \Exception(self::NOT_FOUND);
    }

    /**
     * Function to convert an array to object
     * @author Noman
     * @copyright Blueliner Marketing
     * @version 0.1
     * @access private
     */
    private function arrayToObject($array) {
        if (!is_array($array)) {
            return $array;
        }
        $object = new \stdClass();
        if (is_array($array) && count($array) > 0) {
            foreach ($array as $name => $value) {
                $name = strtolower(trim($name));
                if (!empty($name)) {
                    $object->$name = $this->arrayToObject($value);
                }
            }
            return $object;
        } else {
            return FALSE;
        }
    }

    public function getClientNames() {
        $q = $this->_em->createQuery("SELECT u.id, u.organization_name as client_greek_name, u.user_status,cp.greek_name FROM BL\Entity\User u, BL\Entity\ClientProfile cp where cp.user_id = u.id and u.account_type=" . ACC_TYPE_CLIENT . " and u.user_status != 'Cancelled' and cp.greek_name !='' order by u.organization_name");
        return $q->getResult();
    }

    public function getVendorNames() {
        $q = $this->_em->createQuery("SELECT u.id, u.organization_name, u.user_status FROM BL\Entity\User u where u.account_type=" . ACC_TYPE_VENDOR . " and u.user_status != 'Cancelled'");
        return $q->getResult();
    }

    public function getVendorsBatch($vendorId) {
        $q = $this->_em->createQuery("SELECT u.id, u.organization_name FROM BL\Entity\User u where u.account_type=" . ACC_TYPE_VENDOR . " and u.user_status != 'Cancelled' and u.id in($vendorId)");
        return $q->getResult();
    }

    public function getClientsBatch($clientId) {
        $q = $this->_em->createQuery("SELECT u.id, u.organization_name as client_greek_name FROM BL\Entity\User u where u.account_type=" . ACC_TYPE_CLIENT . " and u.user_status != 'Cancelled' and u.id in($clientId)");
        return $q->getResult();
    }

    public function getAutocompleteClients($term) {
        $q = $this->_em->createQuery("SELECT u.organization_name as value FROM BL\Entity\User u where u.account_type=" . ACC_TYPE_CLIENT . " and u.user_status != 'Cancelled' and u.organization_name LIKE '" . $term . "%'");
        return $q->getArrayResult();
    }

    public function getAutocompleteVendors($term) {
        $q = $this->_em->createQuery("SELECT u.id as vid, u.organization_name as value FROM BL\Entity\User u where u.account_type=" . ACC_TYPE_VENDOR . " and u.organization_name LIKE '" . $term . "%'");
//        $q = $this->_em->createQuery("SELECT u.id as vid, u.organization_name as value FROM BL\Entity\User u where u.account_type=" . ACC_TYPE_VENDOR . " and u.user_status != 'Cancelled' and u.organization_name LIKE '" . $term . "%'");
        return $q->getArrayResult();
    }

    /**
     * Function to get users by user type and status
     * @author Masud
     * @copyright Blueliner Marketing
     * @version 0.1
     * @access public
     * @return String
     */
    public function getUsersByTypeAndStatus($params=array()) {
        $q = $this->_em->createQuery("SELECT u.id, u.organization_name FROM BL\Entity\User u where u.account_type=" . $params['account_type'] . " and u.user_status = '" . $params['user_status'] . "'");
        return $q->getResult();
    }

    	/**
     	* Function to get ALl Vendors with status to show in the admin dashboard
     	* @author Mahbub
     	* @copyright Blueliner Marketing
     	* @version 0.1
     	* @access public
	* @return String
     	*/
    	public function getAllVendors($params=array()) 
	{
        	$itemPerPage = isset($params['per_page']) ? $params['per_page'] : 10;
        	$currentPage = isset($params['page_start']) ? $params['page_start'] : 1;

        	$searchStr = isset($params['search']) ? $params['search'] : '';
        	$sort_by = isset($params['sort_key']) ? $params['sort_key'] : '';
        	$sort_dir = isset($params['sort_dir']) ? $params['sort_dir'] : '';

		$newsearch = str_replace(" ","%",$searchStr); //added by softura to fix bug in search where "ink people" would not expand to "ink to the people"

        	$conditions = "WHERE u.organization_name !='' AND u.account_type=" . ACC_TYPE_VENDOR;
        	$search_clause = !empty($searchStr) ? " AND u.organization_name like '%$newsearch%'" : "";
        	$order_clause = !empty($sort_by) ? "ORDER BY $sort_by $sort_dir" : "";

        	if (isset($params['status']) && ($params['status'] != 'all')) 
		{

            		$status = explode(',', $params['status']);
            		$conditions .= " AND ( ";
            		$count = 1;
	            	foreach ($status as $s) 
			{
                		$conditions .= " u.user_status='" . $s . "'";
                		if ($count < count($status)) 
				{
                    			$conditions .= " OR";
	                	}
        	        	$count++;
            		}

	            	$conditions .=")";
        	}

        	$q = $this->_em->createQuery("
            	SELECT partial u.{id,organization_name,user_status,created_at}
                FROM BL\Entity\User u
            	$conditions
            	$search_clause
            	$order_clause
       		");

        	if (isset($params['show_total']) AND $params['show_total'] === true) 
		{
        	    return \DoctrineExtensions\Paginate\Paginate::getTotalQueryResults($q);
        	} 
		else 
		{
       	 	    $records = $q->setFirstResult($currentPage)->setMaxResults($itemPerPage); // Step 2
        	    return $records;
        	}
	}

    	/**
     	* Function to get All Vendors with status to show in the admin dashboard
     	* @access public
     	* @return String
     	*/
    	public function getLicensedVendors($params=array()) 
	{
        	$itemPerPage = isset($params['per_page']) ? $params['per_page'] : 10;
        	$currentPage = isset($params['page_start']) ? $params['page_start'] : 1;

	        $searchStr = isset($params['search']) ? $params['search'] : '';
	        $sort_by = isset($params['sort_key']) ? $params['sort_key'] : '';
	        $sort_dir = isset($params['sort_dir']) ? $params['sort_dir'] : '';

	        $search_clause = !empty($searchStr) ? "WHERE v.organization_name like '$searchStr%'" : "";
        	$order_clause = !empty($sort_by) ? "ORDER BY $sort_by $sort_dir" : "";

	        $q = $this->_em->createQuery("
        	    SELECT partial l.{id,applied_date,status} ,
                	   partial v.{id,organization_name},
               		   partial c.{id,organization_name, username}
	            FROM BL\Entity\License l
        	        JOIN l.vendor_id v
                   	JOIN l.client_id c
            		$search_clause
            		$order_clause
       		");

        	if (isset($params['show_total']) AND $params['show_total'] === true) {
            		return \DoctrineExtensions\Paginate\Paginate::getTotalQueryResults($q);
        	} 
		else 
		{
            		$records = $q->setFirstResult($currentPage)->setMaxResults($itemPerPage); // Step 2
            		return $records;
        	}
    	}

    	/**
     	* Function to Search Vendors By Contact Information
     	*/
    	public function searchVendorByContact($search_params=array(), $limit_fields=array()) 
	{
        	$sorting_cols = array('0' => 'u.organization_name', '1' => 'u.organization_name', '2' => 'l.applied_date', '3' => 'l.status');
		$search_params['iSortCol_0'] = isset($search_params['iSortCol_0']) ? $search_params['iSortCol_0'] : 0;

	        $params = array(
	        	'search' => isset($search_params['sSearch']) ? $search_params['iDisplayStart'] : '',
	            	'current_page' => isset($search_params['iDisplayStart']) ? $search_params['iDisplayStart'] : 1,
	            	'draw_count' => isset($search_params['sEcho']) ? $search_params['sEcho'] : "",
	            	'per_page' => isset($search_params['iDisplayLength']) ? $search_params['iDisplayLength'] : 10,
	            	'sort_key' => isset($sorting_cols[$search_params['iSortCol_0']]) ? $sorting_cols[$search_params['iSortCol_0']] : '',
	            	'search_op' => isset($search_params['search_op']) ? $search_params['search_op'] : 'AND',
	            	'sort_dir' => isset($search_params['sSortDir_0']) ? $search_params['sSortDir_0'] : 'ASC',
	        );

        	$field_map = array(
        	    	"username" => "u.username",
					"status" => "u.status",
            		"email" => "u.email",
            		"company_name" => "u.organization_name",
            		"company_email" => "u.company_email",
            		"address_line_1" => "u.address_line1",
            		"address_line_2" => "u.address_line2",
            		"city" => "u.city",
            		"state" => "u.state",
            		"zip" => "u.zipcode",
            		"phone_1" => "u.phone",
            		"phone_2" => "u.phone2",
            		"fax" => "u.fax",
            		"web_page" => "u.website",
            		"user_code" => "u.user_code"
        	);
			
        	$contact_map = array(
        			"sal" => "c.sal",
        			"first_name" => "c.first_name",
        			"last_name" => "c.last_name",
        			"job_title" => "c.title",
        			"work_phone" => "c.phone",
        			"mobile" => "c.mobile",
        			"contact_type" => "c.contact_type"
        	);

        	$search_clause = "WHERE u.account_type=" . ACC_TYPE_VENDOR;

        	foreach ($field_map as $k => $val) 
			{
            	if (isset($search_params[$k]) AND $search_params[$k] <> "") 
				{
               		$search_clause.= $params['search_op'] . " " . $val . " like '%" . $search_params[$k] . "%' ";
           		}
        	}
        	
        	foreach($contact_map as $k => $val){
        		if (isset($search_params[$k]) AND $search_params[$k] <> ""){
        		error_log("\nvisited contact map", 3, "./errorLog.log");
        			$search_clause .= $params['search_op'] . " " . $val . " like '%" . $search_params[$k] . "%' ";
        		}
        	}

	        $status_conditions = "";
        	if (isset($search_params['vendor_status']) && ($search_params['vendor_status'] != 'all' )) {
            		$status = explode(',', $search_params['vendor_status']);
	            	$status_conditions .= " AND (";
	            	$count = 1;
            		foreach ($status as $s) 
			{
                		$status_conditions .= " u.user_status='" . $s . "'";
                		if ($count < count($status)) 
				{
                    			$status_conditions .= " OR";
                		}
                		$count++;
            		}
            		$status_conditions .=") ";
        	}

        	$order_clause = !empty($params['sort_key']) ? " ORDER BY " . $params['sort_key'] . " " . $params['sort_dir'] . "" : "";
        	$q = $this->_em->createQuery("
            	SELECT u.id
            	FROM BL\Entity\UserContact c
        		JOIN c.user_id u 
            	$search_clause
            	$status_conditions
            	$order_clause 
       		");

        	$results = $q->getResult();
        	 
        	$search_items = "";
        	 
        	$first = true;
        	 
        	foreach($results as $result){
        		if ($first){
        			$search_items .= " u.id = " . $result['id'];
        			$first = false;
        		} else {
        			$search_items .= " OR u.id = " . $result['id'];
        		}
        	}
        	 
        	error_log("\n query: SELECT DISTINCT u FROM BL\Entity\User u WHERE $search_items", 3, "./errorLog.log");
        	 
        	$q = $this->_em->createQuery("SELECT DISTINCT u FROM BL\Entity\User u WHERE $search_items");
        	
        	$paginator = new Paginator($q);
        	$records_total = $paginator->count();
        	$records = $q->setFirstResult($params['current_page'])->setMaxResults($params['per_page'])->getArrayResult();


        	$json = '{"iTotalRecords":' . $records_total . ',
        	 "iTotalDisplayRecords": ' . $records_total . ',
        	 "aaData":[';
		$is_limited_fields = count($limit_fields);

		$prec = array();
        	$AllRecords = array();
		$UserArray = array();
		$max = 1;

        	if ($is_limited_fields) 
		{
			$count = 0;
        	    	foreach ($records as $rec) 
			{
                    		$fields = array('contact_type','user_first_name', 'user_last_name', 'user_title', 'user_address', 'user_city', 'user_state', 'user_zip', 'user_phone', 'user_mobile', 'user_fax', 'count');
				$UserArray = array();
                    		$query = $this->_em->createQuery("SELECT
                                                    uc.first_name AS user_first_name,
                                                    uc.last_name AS user_last_name,
                                                    uc.title AS user_title,
                                                    uc.address_line1 AS user_address,
                                                    uc.city AS user_city,
                                                    uc.state AS user_state,
                                                    uc.zipcode AS user_zip,
                                                    uc.phone AS user_phone,
                                                    uc.mobile AS user_mobile,
                                                    uc.fax AS user_fax,
						    uc.contact_type AS contact_type
                                                    FROM BL\Entity\UserContact uc
                                                    WHERE uc.user_id = :id");
                    		$query->setParameter('id', $rec['id']);
                    		$UserContactList = $query->getResult();
		    		$count = 0;
                    		foreach ($UserContactList as $User) 
				{
					$count++;
					$tempUserArray = array();
					$addon = '';
					if($count >1)
					$addon = $count;
					if($count > $max)
						$max = $count;
                        		foreach ($User as $key => $value) 
					{
                           	 		$tempUserArray[$key.$addon] = $value;
			    			//$tempUserArray['count'] = implode("|",array_keys($UserArray));
                        		}
					if($count<$max)
					{
						for($i=$count+1;$i<=$max;$i++)
						{
							foreach($fields as $key)
							$tempUserArray[$key.$i] = '';
						}
					}
					$UserArray = array_merge($UserArray, $tempUserArray);
                    		}
                    		array_push($AllRecords, array_merge($rec, $UserArray));
            		}
            		return $AllRecords;    // Calling from export
        	}

		$records = $q->setFirstResult($params['current_page'])->setMaxResults($params['per_page'])->getResult();
        	$first = 0;
        	foreach ($records as $v) 
		{
        		if ($first++) 
			{
                		$json .= ',';
            		}
            		$json .= '["<a href=\"javascript:;\" class=\"vendor_link\" rel=\"m:contact,v:' . $v->id . ',c:' . $v->id . '\">' . str_replace(chr(13), '', str_replace(chr(10), "", $v->organization_name)) . '</a>",
              		"' . (!is_null($v->created_at) ? $v->created_at->format("M d, Y H:i A") : "N/A") . '","' . (!is_null($v->user_status) ? $v->user_status : "-") . '"]';
        	}
        	$json .= ']}';
        	return $json;
    	}

    	public function getEmailById($client_id) 
	{
        	$q = $this->_em->createQuery("SELECT u.id, u.email, u.organization_name FROM BL\Entity\User u where u.id = '" . $client_id . "'");
        	return $q->getResult();
    	}

    	/**
     	* Function to Export data based on search query and type of search performed
     	* @access public
     	* @return String
	*/
	public function exportVendorInformation($search_params, $fields_to_export, $labels='') 
	{

        	$labels = rtrim($labels, "||");
        	$labels = explode("||", $labels);
        	$label_array = array();
		$secondary = false;
		foreach ($labels as $label) 
		{
			$exploded = explode("~", $label);

			if (reset($exploded) == 'id' && end($exploded) == 'All Contacts') 
			{
				$label_array['contact_type'] = 'Contact Type';
        	        	$label_array['user_first_name'] = 'User First Name';
        	        	$label_array['user_last_name'] = 'User Last Name';
        	        	$label_array['user_title'] = 'User Title';
				$label_array['user_phone'] = 'User Phone';
				$label_array['user_mobile'] = 'User Mobile';
				$label_array['user_fax'] = 'User Fax';
        	        	//$label_array['count'] = 'count'; // field that was used for debugging puposes
				$secondary = true;
			} 
			else 
			{
                		$label_array[reset($exploded)] = end($exploded);
			}
        	}
		$search_params['iDisplayStart'] = 0;
		$search_params['iDisplayLength'] = 50000000000000;//ugly kludge to make row limit unreachable

        	switch ($search_params['search_type']) 
		{
		case "contact":
        		$recs = $this->_em->getRepository("BL\Entity\User")->searchVendorByContact($search_params, $fields_to_export);
			foreach ($recs as $t) 
			{
				//echo ((count(array_keys($t))-37)/10).",\n";// getting the number of contacts
				$numcontacts = (count(array_keys($t))-37)/10;
			}
			for($i=2;$numcontacts >= $i && $secondary ;$i++)// this creates a column for each contacts information
			{
				//echo $i." contact".",";
				$label_array['user_first_name'.$i] = 'User First Name'.$i;
                	        $label_array['user_last_name'.$i] = 'User Last Name';
                	        $label_array['user_title'.$i] = 'User Title';
                	        $label_array['user_phone'.$i] = 'User Phone';
                	        $label_array['user_mobile'.$i] = 'User Mobile';
                	        $label_array['user_fax'.$i] = 'User Fax';
				$label_array['contact_type'.$i] = 'Contact Type'.$i;
                	        //$label_array['count'] = 'count';
			}
                	return array('title' => 'Contact', 'labels' => $label_array, 'data' => $recs);
                	break;

		case "correspondence":
			$recs = $this->_em->getRepository("BL\Entity\VendorCorrespondence")->searchVendorByCorrespondence($search_params, $fields_to_export);
	                return array('title' => 'Correspondence', 'labels' => $label_array, 'data' => $recs);
	                break;

	        case "operations":
	                $recs = $this->_em->getRepository("BL\Entity\VendorOperation")->searchVendorByOperations($search_params, $fields_to_export);
                	return array('title' => 'Operations', 'labels' => $label_array, 'data' => $recs);
                	break;

	        case "clients":
	                $recs = $this->_em->getRepository("BL\Entity\License")->searchVendorByClients($search_params, $fields_to_export);
	                return array('title' => 'Clients', 'labels' => $label_array, 'data' => $recs);
	                break;

	        case "lisc-agreements":
        	        $recs = $this->_em->getRepository("BL\Entity\License")->searchVendorByLiscAgreements($search_params, $fields_to_export);
        	        return array('title' => 'Lisc-Agreements', 'labels' => $label_array, 'data' => $recs);
        	        break;
        
		case "web-profile":
        	        $recs = $this->_em->getRepository("BL\Entity\VendorProfile")->searchVendorByWebProfile($search_params, $fields_to_export);
        	        return array('title' => 'Web Profile', 'labels' => $label_array, 'data' => $recs);
        	        break;
        	
		default:
                	break;
        	}
	}

    /**
     * Function to get All Clients with status to show in the admin dashboard
     * @author Tanzim
     * @copyright Blueliner Marketing
     * @version 0.1
     * @access public
     * @return String
     */
    public function getAllClients($params=array()) {
        $itemPerPage = isset($params['per_page']) ? $params['per_page'] : 10;
        $currentPage = isset($params['page_start']) ? $params['page_start'] : 1;

        $searchStr = isset($params['search']) ? $params['search'] : '';
        $sort_by = isset($params['sort_key']) ? $params['sort_key'] : '';
        $sort_dir = isset($params['sort_dir']) ? $params['sort_dir'] : '';

        $conditions = "WHERE u.organization_name !='' AND u.account_type=" . ACC_TYPE_CLIENT;
        $search_clause = !empty($searchStr) ? " AND u.organization_name like '$searchStr%'" : "";
        $order_clause = !empty($sort_by) ? "ORDER BY $sort_by $sort_dir" : "";

        if (isset($params['status']) && ($params['status'] != 'all')) {

            $status = explode(',', $params['status']);
            $conditions .= " AND ( ";
            $count = 1;
            foreach ($status as $s) {
                $conditions .= " u.user_status='" . $s . "'";
                if ($count < count($status)) {
                    $conditions .= " OR";
                }
                $count++;
            }

            $conditions .=")";
        }

        /**
         * We have to build the query here
         */
        $q = $this->_em->createQuery("
            SELECT partial u.{id,organization_name,user_status,created_at}
                FROM BL\Entity\User u
            $conditions
            $search_clause
            $order_clause
       ");

        if (isset($params['show_total']) AND $params['show_total'] === true) {
            return \DoctrineExtensions\Paginate\Paginate::getTotalQueryResults($q);
        } else {
            $records = $q->setFirstResult($currentPage)->setMaxResults($itemPerPage); // Step 2
            return $records;
        }
    }

    /**
     * Function to get all registrants users for admin portal
     * @author Masud
     * @copyright Blueliner Marketing
     * @version 0.1
     * @access public
     * @return String
     */
    public function getRegistrantUsers($params=array()) {
//        print_r($params);
        $itemPerPage = isset($params['per_page']) ? $params['per_page'] : 10;
        $currentPage = isset($params['page_start']) ? $params['page_start'] : 1;
        $reg_status = isset($params['reg_status']) ? $params['reg_status'] : '';
        $searchStr = isset($params['search']) ? $params['search'] : '';
        $sort_by = isset($params['sort_key']) ? $params['sort_key'] : '';
        $sort_dir = isset($params['sort_dir']) ? $params['sort_dir'] : '';
        $search_clause = " AND u.organization_name like '$searchStr%'";
        $order_clause = !empty($sort_by) ? "ORDER BY $sort_by $sort_dir " : "";
        $conditions = "u.reg_status = '$reg_status'";

        /**
         * We have to build the query here
         */
        $q = $this->_em->createQuery("
            SELECT partial u.{id, organization_name, reg_status, reg_date, approve_date, decline_date}
            FROM BL\Entity\User u
             WHERE " . $conditions . "  $order_clause
       ");
//        echo $q->getSQL();
//        die();
        if (isset($params['show_total']) AND $params['show_total'] === true) {
            $paginator = new Paginator($q);
            return $paginator->count();
        } else {
            $records = $q->setFirstResult($currentPage)->setMaxResults($itemPerPage)->getResult();
            return $records;
        }
    }

    /**
     * Function to get users who is in admin or employee role
     * @author Masud
     * @copyright Blueliner Marketing
     * @version 0.1
     * @access public
     * @return String
     */
    public function getAdminAndEmployees($params = array()) {
        $itemPerPage = isset($params['per_page']) ? $params['per_page'] : 10;
        $currentPage = isset($params['page_start']) ? $params['page_start'] : 1;
        $reg_status = isset($params['reg_status']) ? $params['reg_status'] : '';
        $searchStr = isset($params['search']) ? $params['search'] : '';
        $sort_by = isset($params['sort_key']) ? $params['sort_key'] : '';
        $sort_dir = isset($params['sort_dir']) ? $params['sort_dir'] : '';
        $search_clause = " AND u.username like '$searchStr%'";
        $order_clause = !empty($sort_by) ? "ORDER BY $sort_by $sort_dir " : "";
        $conditions = "(u.account_type = 1 OR u.account_type = 4)";

        /**
         * We have to build the query here
         */
        $q = $this->_em->createQuery("
            SELECT partial u.{id, first_name, last_name, username, email, account_type, reg_status, user_status, reg_date, last_login}
            FROM BL\Entity\User u
            WHERE $conditions $search_clause $order_clause
       ");
        if (isset($params['show_total']) AND $params['show_total'] === true) {
            $paginator = new Paginator($q);
            return $paginator->count();
        } else {
            $records = $q->setFirstResult($currentPage)->setMaxResults($itemPerPage)->getResult();
            return $records;
        }
    }
    public function getVendors($client_id, $city, $vendor_name, $zip_code, $product, $services) {
        $condition=" WHERE a.client_id =$client_id AND a.status = 4";
        $join_tables = '';
        $order_by = "  order by u.organization_name ASC ";
        $group_by = "  group by u.id ";
        if (!empty($product) && $product != "Product Name") {
                $join_tables =
                        "
			LEFT JOIN vendor_web_profile_products vwpp ON u.id = vwpp.vendor_id
			LEFT JOIN products p ON vwpp.product_id = p.id ";
                $condition .=
                      " AND
			(
			 u.organization_name LIKE '%" . $product . "%'
			 OR vpf.organization_name LIKE '%" . $product . "%'
			 OR vpf.company_discripction LIKE '%" . $product . "%'
			 OR p.product_name LIKE '%" . $product . "%'
			) ";
            }
        if (!empty($services) && count($services) > 0) {
            $service = '';
            foreach ($services as $s) {
                $service.=$s . ',';
            }
            $service = substr($service, 0, -1);
            $join_tables .=" LEFT JOIN vendor_services vs ON u.id = vs.vendor_id ";
            $condition .= " AND vs.service_id IN (" . $service . ") ";
        }
        if (!empty($city) and $city != "City/State") {
                $condition .= " AND ( u.city like '" . $city . "%' ";
                $condition .= " OR u.state like '" . $city . "%' ) ";
            }
            if (!empty($vendor_name) and $vendor_name != "Company Name") {
                $condition .= " AND u.organization_name like '%" . $vendor_name . "%' ";
            }
        if (!empty($zip_code) and $zip_code != "Zip Code") {
            //$condition .= " AND u.zipcode like '%".$zip_code."%' ";
            $zip_sql = $this->_em->createQuery("SELECT  z.latitude, z.longitude FROM BL\Entity\ZipCode z WHERE z.zip =$zip_code GROUP BY z.zip");
            $zip_info = $zip_sql->getResult();
            //echo $zip_sql->getSql();
            $latitude = $zip_info[0]['latitude'];
            $longitude = $zip_info[0]['longitude'];
            //echo count($zip_info); exit;
            if (sizeof($zip_info)) {
                $zipCodeList = $this->zipcodeRadius($latitude, $longitude, 100);
                //echo $zipCodeList; exit;
                $condition .= " AND u.zipcode IN($zipCodeList) AND u.account_type='2'";
                //print_r($zip_info);
            }
        }
        $bootstrap = \Zend_Controller_Front::getInstance()->getParam('bootstrap');
        $aConfig = $bootstrap->getOptions();
        $dbSettings = $aConfig['resources']['db']['params'];

        $dbhost = $dbSettings['host'];
        $dbuser = $dbSettings['username'];
        $dbpass = $dbSettings['password'];
        $dbname = $dbSettings['dbname'];
        $conn = mysql_connect($dbhost, $dbuser, $dbpass);
        mysql_select_db($dbname);
        /*$q = $this->_em->createQuery("
            SELECT partial a.{id, client_id, vendor_id} ,
                   partial u.{id, organization_name, zipcode, account_type},
                   partial vpf.{logo_url}
            FROM BL\Entity\User u
            INNER JOIN u.category_association a
            LEFT JOIN u.vendor_profile vpf
        {$condition}
            order by u.organization_name ASC
                     ");
        //echo $q->getSql(); exit;
        $res=$q->getResult();*/
        //echo $q->getSql(); exit;
        $q = " SELECT a.* , u.* , vpf.logo_url FROM users u

	    INNER JOIN licenses a ON u.id = a.vendor_id
            LEFT JOIN vendor_profiles vpf ON u.id = vpf.user_id";
        $sql = $q . $join_tables . $condition . $group_by . $order_by;

	//echo $sql;
        $res= mysql_query($sql);

	return $res;
       //echo count($res);
       //exit;
    }
    public function zipcodeRadius($lat, $lon, $radius)
    {
        $bootstrap = \Zend_Controller_Front::getInstance()->getParam('bootstrap');
        $aConfig = $bootstrap->getOptions();
        $dbSettings = $aConfig['resources']['db']['params'];
        $radius = $radius ? $radius : 100;
        $sql = 'SELECT distinct(zip) FROM zip_codes  WHERE (3958*3.1415926*sqrt((Latitude-'.$lat.')*(Latitude-'.$lat.') + cos(Latitude/57.29578)*cos('.$lat.'/57.29578)*(Longitude-'.$lon.')*(Longitude-'.$lon.'))/180) <= '.$radius.';';

        $dbhost = $dbSettings['host'];
        $dbuser = $dbSettings['username'];
        $dbpass = $dbSettings['password'];
        $dbname = $dbSettings['dbname'];
        $conn = mysql_connect($dbhost, $dbuser, $dbpass);
        mysql_select_db($dbname);
        $res= mysql_query($sql);

        while($row = mysql_fetch_assoc($res))
        {
            $zipcodeList[]=$row['zip'];
        }
        $zipcodeList = implode(",",$zipcodeList);

        return $zipcodeList;
    }
}

