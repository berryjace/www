<?php

namespace BL\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NotificationRepository extends EntityRepository {

    /**
     * Function to get all notifications with status to show in the admin notifications
     * @author Masud
     * @copyright Blueliner Marketing
     * @version 0.1
     * @access public
     * @return String
     */
    public function getNotifications($params=array()) {
        $itemPerPage = isset($params['per_page']) ? $params['per_page'] : 10;
        $currentPage = isset($params['page_start']) ? $params['page_start'] : 1;

        $searchStr = isset($params['search']) ? $params['search'] : '';
        $sort_by = isset($params['sort_key']) ? $params['sort_key'] : '';
        $sort_dir = isset($params['sort_dir']) ? $params['sort_dir'] : '';

        $search_clause = !empty($searchStr) ? "WHERE n.title like '$searchStr%'" : "";
        $order_clause = !empty($sort_by) ? "ORDER BY $sort_by $sort_dir" : "";
        $today = "'" . date('Y-m-d') . "'";
        if ($params['targetPage'] == "upcoming") {
            $targetPage = "AND n.time>=" . $today;
        } elseif ($params['targetPage'] == "past") {
            $targetPage = "AND n.time<" . $today;
        } else {
            $targetPage = "";
        }

        /**
         * We have to build the query here
         */
        //echo $search_clause;
        $map_condition = "((n.for_user_type IN ('random', 'c_vrandom', 'v_crandom') AND n.id = nu.notification_id)
            OR n.for_user_type = 'all_vendor'
            OR n.for_user_type = 'all_client'
            OR n.for_user_type = 'all')";
        $q = $this->_em->createQuery("
            SELECT n.id, n.time, n.title, n.message, n.for_user_type,  count( nu.id ) AS total,
            (select count(u1.id) from BL\Entity\User u1 where u1.account_type = ".ACC_TYPE_VENDOR." and u1.user_status != 'Cancelled') as total_vendor,
            (select count(u2.id) from BL\Entity\User u2 where u2.account_type = ".ACC_TYPE_CLIENT." and u2.user_status != 'Cancelled') as total_client
            FROM BL\Entity\Notification n, BL\Entity\NotificationUser nu "
                        . ($search_clause ? $search_clause . " AND $map_condition" : " WHERE $map_condition ")
                        . "$targetPage GROUP BY n.id $order_clause
       ");

        //echo $q->getSQL();
        if (isset($params['show_total']) AND $params['show_total'] === true) {
            return \DoctrineExtensions\Paginate\Paginate::getTotalQueryResults($q);
        } else {
            $records = $q->setFirstResult($currentPage)->setMaxResults($itemPerPage); // Step 2
            //print_r($records);
            return $records;
        }
    }

    /**
     *Function to get notification for_user_type
     * @author Masud
     * @version 0.1
     * @copyright Blueliner Marketing
     * @access public
     * @param <int> $notificationId
     * @return <array>
     * @return void
     */
    public function getNotification($notificationId){
        $sql = "SELECT n FROM BL\Entity\Notification n WHERE n.id = ".$notificationId;
        $q = $this->_em->createQuery($sql);
        return $q->getResult();
    }

    /**
     *Function to delete notification
     * @author Masud
     * @version 0.1
     * @copyright Blueliner Marketing
     * @access pulic
     * @param <int> $notificationId
     * @return void
     */
    public function deleteNotification($notificationId){
        $sql = "DELETE FROM BL\Entity\Notification n where n.id = ".$notificationId;
        $q = $this->_em->createQuery($sql);
        $q->getResult();
    }

     /**
     * Function to noticfication number with the title and date
     * @author Zea
     * @version 0.1
     * @copyright Blueliner Marketing
     * @access pulic
     * @param
     * @return string
     */
    public function notificationTitles() {
        $today = "'" . date('Y-m-d') . "'";
        $sql = "SELECT n.id,n.time,n.title, count( n.id ) as totalNotifications FROM BL\Entity\Notification n
            WHERE n.time>=". $today." ORDER BY n.time";
        $q = $this->_em->createQuery($sql);
       // return $q->getSQL();
       return $q->getResult();
    }

    /**
     * Function to get Notifications for particular vendor
     * @author Zea
     * @version 0.1
     * @copyright Blueliner Marketing
     * @access pulic
     * @param array $params
     * @return events
     */
    public function getNotificationDt($params) {
        $itemPerPage = isset($params['per_page']) ? $params['per_page'] : 10;
        $currentPage = isset($params['page_start']) ? $params['page_start'] : 1;

        $searchStr = isset($params['search']) ? $params['search'] : '';
        $sort_by = isset($params['sort_key']) ? $params['sort_key'] : '';
        $sort_dir = isset($params['sort_dir']) ? $params['sort_dir'] : '';

       $today = date('Y-m-d');
       if($params['page'] == 'all' && $params['type']== 'vendor'){
            $conditions = " WHERE ((nu.user_id = '$params[id]' AND n.id=nu.notification_id AND n.for_user_type in('random', 'c_vrandom')) OR n.for_user_type in('all', 'all_vendor', 'v_crandom')) AND n.send_via in ('site_notification', 'email_notification')";
        }

        else if($params['page'] == 'all' && $params['type']== 'client'){
            $conditions = " WHERE ((nu.user_id = '$params[id]' AND n.id=nu.notification_id AND n.for_user_type in('random', 'v_crandom')) OR n.for_user_type in('all', 'all_client', 'c_vrandom') AND n.send_via in ('site_notification', 'email_notification'))";
        }
        
        $limit = " LIMIT " . $currentPage . ", " . $itemPerPage;
        $search_clause = !empty($searchStr) ? " AND n.title like '$searchStr%'" : "";
        $order_clause = !empty($sort_by) ? "ORDER BY $sort_by $sort_dir" : "";

        $for_user_type = Array();
        $for_user_type[0] = 'all';
        $for_user_type[1] = 'all_vendor';
        $for_user_type [2] = 'random';
        $for_user_type [3] = 'v_crandom';
        $for_user_type [4] = 'c_vrandom';

        $q = "
            SELECT n.id, n.title, n.message, n.for_user_type, n.time
                 FROM notifications n, notifications_users nu
            ".$conditions."
          " . $search_clause ." GROUP BY n.id " . $order_clause . $limit;
        $s = "
            SELECT n.id, n.title, n.message, n.for_user_type, n.time
                 FROM notifications n, notifications_users nu
            ".$conditions."
          " . $search_clause ." GROUP BY n.id " . $order_clause;
        $con = $this->_em->getConnection();
        $records = $con->fetchAll($q);
        $json = '{"iTotalRecords":' . sizeof($con->fetchAll($s)). ',
         "iTotalDisplayRecords": ' . sizeof($con->fetchAll($s)) . ',
         "aaData":';
        $prec = array();
        foreach ($records as $key=>$n) {            
            $replace   = array("<br>", "<br />", "<br/>");
            $message = html_entity_decode($n['message']);
            $message = str_replace($replace, " ", $message);
            $message = strip_tags($message);

            if(strlen($message)>72){
                $message = substr($message,0,72)."...";
            }
            else{
                $message = strip_tags($message);
            }
//            $link = 'vendor/notification/notification-Details/id/'.$n['id'];
            $prec[] = array(
              date("M d, Y h:i a", strtotime($n['time'])),
              strip_tags(html_entity_decode($n['title'])),
              $message,
              '<a class="view" href="javascript:;" rel="'.$n['id'].'">Details</a>'
                );
        }
        $json .= \Zend_Json::encode($prec);
        $json .= '}';
        return $json;

   }
    /**
     * Function to get notification to show
     * @author Zea
     * @version 0.1
     * @copyright Blueliner Marketing
     * @access pulic
     * @param userid
     * @return void
     */
    public function facebookStyleNotification($id, $time, $type) {        
        $for_user_type = Array();
        $for_user_type[0] = 'all';
        $for_user_type[1] = 'all_vendor';
        $for_user_type [2] = 'random';
        $for_user_type [3] = 'v_crandom';
        $for_user_type [4] = 'c_vrandom';
        if($type=='vendor'){
            $conditions = " WHERE ((nu.user_id = '$id' AND n.id=nu.notification_id AND n.for_user_type in('random', 'c_vrandom')) OR n.for_user_type in('all', 'all_vendor', 'v_crandom')) AND n.time>'".$time."' AND n.send_via in ('site_notification', 'email_notification')";
        }
        else if($type=='client'){
            $conditions = " WHERE ((nu.user_id = '$id' AND n.id=nu.notification_id AND n.for_user_type in('random', 'v_crandom')) OR n.for_user_type in('all', 'all_client', 'c_vrandom')) AND n.time>'".$time."' AND n.send_via in ('site_notification', 'email_notification')";

                          
        }

        $q = "
            SELECT n.id, n.title, n.message, n.for_user_type, n.time
                 FROM notifications n, notifications_users nu
            ".$conditions." GROUP BY n.id ";
        $s = "
            SELECT n.id, n.title, n.message, n.for_user_type, n.time
                 FROM notifications n, notifications_users nu
            ".$conditions."GROUP BY n.id ORDER BY n.time DESC" ;
        $con = $this->_em->getConnection();
        $records = $con->fetchAll($q);
        return $records;
    }
    
}
